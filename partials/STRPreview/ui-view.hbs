<div class="STRPreviewList">

{{#foreach posts}}

<div class="STRPreview">

<a class="STRPreviewLink" href="{{url}}" aria-text="{{title}}" style="background-image: url('{{ feature_image }}');" data-number="{{slug}}">
	<div class="STRPreviewLinkBar">
		{{#has visibility="paid"}}
			<span class="STRPreviewLinkBarPaid"><span aria-hidden>â˜…</span> members exclusive</span>
		{{/has}}

		<time class="STRPreviewLinkBarDate" datetime="{{date format='YYYY-MM-DD'}}">{{date format="MMMM Do, YYYY"}}</time>
	</div>
</a>

</div>

{{/foreach}}

</div>

{{pagination}}

<style>
.STRPreviewList {
	display: flex;
	flex-wrap: wrap;
}

@media (max-width: 450px) {
	
	.STRPreviewList {
		justify-content: center;
	}

}

.STRPreview {
	margin: 0 20px 20px 0;
}

@media (max-width: 450px) {
	
	.STRPreview {
		margin-right: unset;
	}

}

.STRPreviewLink {
	display: inline-block;
	width: 275px;
	height: 150px;
	border-radius: 10px;

	background-position: center;
	background-size: 300px;
	text-decoration: none;

	overflow: hidden;

	display: flex;
	flex-direction: column;
	justify-content: space-between;
}

.STRPreviewLinkBar {
	display: block;
	padding: 3px;
	background: rgba(0, 0, 0, 0.75);
	color: white;
	text-shadow: 1px 1px 0 black; 
	font-size: 8pt;
	display: flex;
	justify-content: space-between;
}

.STRPreviewLinkBarDate {
	text-align: right;
	opacity: 0.7;
	flex-grow: 1;
}

.STRPreviewLinkDurationBox {
	text-align: right;
	padding: 8px;
}

.STRPreviewLinkDuration {
	padding: 3px;

	background: rgba(0, 0, 0, 0.9);
	color: white;
	text-shadow: 1px 1px 0 black;
	font-size: 8pt;
	border-radius: 3px;
	position: relative;
}
</style>

<script>
(function() {

const mod = {

	async STRDurationInfoObject (debug) {
		const _window = debug || window;

		const response = await _window.fetch(mod.STRDurationEndpointURL());

		try {
			const outputData = await response.json();
			
			if (mod.STRDurationInfoIsValid(outputData)) {
				return outputData;
			}

			throw new Error('ErrorInputNotValid');
		} catch {
			return null;
		}
	},

	STRDurationInfoIsValid (inputData) {
		if (typeof inputData !== 'object' || inputData === null) {
			throw new Error('OLSKErrorInputNotValid');
		}

		if (!Array.isArray(inputData)) {
			return false;
		}

		return true;
	},

	STRDurationEndpointURL () {
		return 'https://rosano.ca/api/strolling';
	},

	STRDurationLoad (inputData) {
		Array.from(document.querySelectorAll('.STRPreviewLink')).forEach(function (e) {
			const match = inputData[e.dataset['number']];

			if (!match) {
				return;
			}
			
			const target = document.createElement('div');
			e.appendChild(target);
			target.outerHTML = `<div class="STRPreviewLinkDurationBox"><time class="STRPreviewLinkDuration" datetime="${ match.split(':').map((e, i) => e + (!i ? 'm' : 's')).join(' ') }">${ inputData[e.dataset['number']] }</time></div>`;
		});
	},

	// MESSAGE

	async DOMContentLoaded () {
		const _mod = (typeof process !== 'undefined' && process.env.npm_lifecycle_script === 'olsk-spec') ? this : mod;

		if (typeof window === 'object' && window.origin.match('loc.tests')) {
			return;
		}

		_mod.STRDurationLoad((await _mod.STRDurationInfoObject()).pop());
	},

	// LIFECYCLE

	LifecycleModuleDidLoad (debug) {
		(debug || window).document.addEventListener('DOMContentLoaded', mod.DOMContentLoaded);
	},

};

if (typeof window === 'object') {
	mod.LifecycleModuleDidLoad();
}

})();
</script>
